##git configuration
##
git config --global user.name <username>
git config --global user.email <email>

#config review
git config user.name



#create repo
#create or init git in current folder
git init




#see staging|commit status
git status




#add files to staging area
git add <filename>

#add all edited files to staging area
git add .




#commit files (a snapshot of in time of your code)
git commit -m "a very descriptive message"



#log of different commit
git log

#simpler log output
git log --oneline




#undoing commits
#checkout(readonly, going back in time temporary)
git checkout <commit_id>


#revert(undo 1 commit)
#will revert to a commit & create a new copy to the commit stack
git revert <commit_id>


#reset(permanently delete commit)
#will still keep all editors (files) open
git reset <commit_id>
|
#hard reset to a commit version
git reset <commit_id> --hard



###branch
#creating a new branch
git branch <branchname>

#see all branches
git branch -a

#switch or enter in a branch
git checkout <branchname>

#create and switch to branch immediately
git checkout -b <branchname>

#delete branch
git branch -d <branchname>



###merge
#merge two branches
git merge <branchname>


###pull
 git pull origin main

if you have initialized repo in github and also committed locally
 git pull origin master --allow-unrelated-histories

Force a push
 git push -f origin main




To uninitialize (remove) git from your project directory, run this command in your Terminal/Command Line while inside your project directory:
rmdir .git


###Force a push
 git push -f origin master




To configure the initial branch name to use in all of your new repositories, which will suppress this warning, call:
 git config --global init.defaultBranch <name>

Names commonly chosen instead of 'master' are 'main', 'trunk' and 'development'. 
The just-created branch can be renamed via this command:
 git branch -m <name>





You're in the less program, which makes the output of git log scrollable.
   Type q to exit this screen. Type h to get help.

   If you don't want to read the output in a pager and want it to be just printed to the terminal define the environment variable GIT_PAGER to cat or set core.pager to cat (execute git config --global core.pager cat).
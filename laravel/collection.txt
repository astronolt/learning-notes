use Illuminate\Support\Collection;


COLLECTION
==========



   $collection = collect(['taylor', 'abigail', null])->map(function ($name) {
      return strtoupper($name);
   })->reject(function ($name) {
      return empty($name);
   });


   collect([1, 2, 3])->all();


   average();
   avg();


   chunk();
   chunkWhile();


   collapse();
   collect();


   $collection = collect(['name', 'age']);
   $combined = $collection->combine(['George', 29]);
   // ['name' => 'George', 'age' => 29]


   concat();


   $collection = collect([1, 2, 3, 4, 5]); 
   $collection->contains(function ($value, $key) {
      return $value > 5;
   });
   // false

   $collection->contains(4);
   $collection->contains('product', 'Bookcase');

   [filter using "strict" comparisons]
   containsStrict();

   $collection->doesntContain(function ($value, $key) {
    return $value < 5;
   });


   $collection->count();
   
   [countBy() -the method counts the occurrences of every element]
   $collection = collect([1, 2, 2, 2, 3]); 
   $counted = $collection->countBy();
   
   $counted->all();   
   // [1 => 1, 2 => 3, 3 => 1]

   ->dd(); [dumps and kills scripts]
   ->dump(); [dumps only]


   $diff = $collection->diff([2, 4, 6, 8]);

   $diff = $collection->diffAssoc([]);
   $diff = $collection->diffKeys([]);





keyBy
=====
   $collection = collect([
      ['product_id' => 'prod-100', 'name' => 'Desk'],
      ['product_id' => 'prod-200', 'name' => 'Chair'],
   ]);
   
   $keyed = $collection->keyBy('product_id');
   or
   $keyed = $collection->keyBy(function ($item) {
      return strtoupper($item['product_id']);
   });

   $keyed->all();



all
average
avg
chunk
chunkWhile
collapse
collect
combine
concat
contains
containsOneItem
containsStrict
count
countBy
crossJoin
dd
diff
diffAssoc
diffKeys
doesntContain
dump
duplicates
duplicatesStrict
each
eachSpread
every
except
filter
first
firstOrFail
firstWhere
flatMap
flatten
flip
forget
forPage
get
groupBy
has
hasAny
implode
intersect
intersectByKeys
isEmpty
isNotEmpty
join
keyBy
keys
last
lazy
macro
make
map
mapInto
mapSpread
mapToGroups
mapWithKeys
max
median
merge
mergeRecursive
min
mode
nth
only
pad
partition
pipe
pipeInto
pipeThrough
pluck
pop
prepend
pull
push
put
random
range
reduce
reduceSpread
reject
replace
replaceRecursive
reverse
search
shift
shuffle
skip
skipUntil
skipWhile
slice
sliding
sole
some
sort
sortBy
sortByDesc
sortDesc
sortKeys
sortKeysDesc
sortKeysUsing
splice
split
splitIn
sum
take
takeUntil
takeWhile
tap
times
toArray
toJson
transform
undot
union
unique
uniqueStrict
unless
unlessEmpty
unlessNotEmpty
unwrap
value
values
when
whenEmpty
whenNotEmpty
where
whereStrict
whereBetween
whereIn
whereInStrict
whereInstanceOf
whereNotBetween
whereNotIn
whereNotInStrict
whereNotNull
whereNull
wrap
zip



